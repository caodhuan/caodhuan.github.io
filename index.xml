<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我的一些记录总结</title>
    <link>http://caodhuan.github.io/</link>
    <description>Recent content on 我的一些记录总结</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2022 20:29:46 +0800</lastBuildDate><atom:link href="http://caodhuan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cmake 相关</title>
      <link>http://caodhuan.github.io/post/about_cmake/</link>
      <pubDate>Fri, 26 Aug 2022 20:29:46 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/about_cmake/</guid>
      <description>cmake 变量 cmake 的 find_package 命令，会在找到包后，生成一些变量，可以查看生成目录下的 CMakeCache.txt 文件，里面有对应的变量名以及相应的值。 比如
find_package(Boost 1.74.0 REQUIRED) 会生成</description>
    </item>
    
    <item>
      <title>Boost asio系列——多线程</title>
      <link>http://caodhuan.github.io/post/boost_asio1/</link>
      <pubDate>Thu, 25 Aug 2022 18:54:56 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/boost_asio1/</guid>
      <description>boost::asio::io_context::run() asio 的 io_context 实例，在哪个线程调用 run，就会只在那个线程运行， 不管是阻塞还是非阻塞操作。async_read、async_write、post 等等，都是在调用 run 的线程来回调。
The run() function blocks until all work has finished and there are no more handlers to be dispatched, or until the io_context has been stopped.
Multiple threads may call the run() function to set up a pool of threads from which the io_context may execute handlers. All threads that are waiting in the pool are equivalent and the io_context may choose any one of them to invoke a handler.</description>
    </item>
    
    <item>
      <title>最新的 gcc boost 安装</title>
      <link>http://caodhuan.github.io/post/install_boost/</link>
      <pubDate>Tue, 23 Aug 2022 11:28:47 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/install_boost/</guid>
      <description>gcc 源码下载 去 http://ftp.gnu.org/gnu/gcc/ 下载最新版本的源码。
当前时间，最新的是 gcc-12.2.0 下载好了后运行以下脚本
tar -xzf gcc-12.2.0.tar.gz &amp;amp;&amp;amp; cd gcc-12.2.0 解压完毕后，需要下载依赖
contrib/download_prerequisites 一切准备完毕后，生成编译环境，然后开始编译安装
./configure -disable-multilib make -j$(nproc --all) &amp;amp;&amp;amp; make install 然后重启机器，删除旧的版本。
apt remove gcc g++ 查看当前版本
gcc -v 参考这篇文档
如果出现以下错误
: /lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.29&amp;#39; not found 请替换对应的 &amp;ldquo;/lib/x86_64-linux-gnu/libstdc++.so.6&amp;rdquo; 文件，文件在 &amp;ldquo;/usr/local/lib64/libstdc++.so.6&amp;rdquo;
rm /lib/x86_64-linux-gnu/libstdc++.so.6 ln -s /usr/local/lib64/libstdc++.so.6 /lib/x86_64-linux-gnu/libstdc++.so.6 boost 源码下载 去 https://www.boost.org/ 下载对应版本的库。
当前最新的版本是 boost_1_80_0 下载好了后运行以下脚本
tar -xzf boost_1_80_0.tar.gz &amp;amp;&amp;amp; cd boost_1_80_0 ./bootstrap.sh 生成 b2，然后运行它
./b2 -a &amp;amp;&amp;amp; .</description>
    </item>
    
    <item>
      <title>关于 __FILE__ 宏</title>
      <link>http://caodhuan.github.io/post/about_file_macro/</link>
      <pubDate>Mon, 22 Aug 2022 17:03:29 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/about_file_macro/</guid>
      <description>__FILE__ 宏的文件名，是根据编译时输入的文件名。如果编译时输入相对目录文件名，那么这个宏展开的就是相对文件名，如果是绝对路径名，就是完整的路径名。CMake 默认是用完整的绝对路径。 </description>
    </item>
    
    <item>
      <title>服务端使用 Mono</title>
      <link>http://caodhuan.github.io/post/mono/</link>
      <pubDate>Sun, 21 Aug 2022 17:16:21 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/mono/</guid>
      <description></description>
    </item>
    
    <item>
      <title>VScode c&#43;&#43; 环境搭建</title>
      <link>http://caodhuan.github.io/post/vscode-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 21 Aug 2022 16:22:01 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/post/vscode-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>安装的插件有 CMake
现在习惯用 cmake 来搭建工程了
CMake Language Support
我喜欢用 cmake 来管理工程，这个插件能补全 cmake 代码
Doxygen Documentation Generator
用来生成注释，在文件开头输入 /**，再按回车健，即会生成文件头注释。 在函数的上方输入 /**，会生成函数注释
One Dark Pro
漂亮的主题
Material Icon Theme
这图标，爱了爱了
c/c++
虽然 cpp-tools 进程会导致 cpu 占用高，但跳转功能真的是没法儿割舍
由于 c/c++ 插件的默认搜索路径少了 /usr/include，会出现错误提示。 所以需要手工添加一下这个配置。 Clang-Format
代码格式化，推荐 google 风格
安装的字体 JetBrains Mono 由于该字体会连写一些操作符，所以需要设置 &amp;#34;editor.fontLigatures&amp;#34;: true, </description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://caodhuan.github.io/about/</link>
      <pubDate>Thu, 11 Aug 2022 20:24:14 +0800</pubDate>
      
      <guid>http://caodhuan.github.io/about/</guid>
      <description>一些记录文档</description>
    </item>
    
  </channel>
</rss>
